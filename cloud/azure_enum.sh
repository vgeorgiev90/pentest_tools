#!/bin/bash
## Simple wrapper around azure-cli for basic enumeration on AAD and ARM
## Dependencies: azure-cli, jq



### Filter for Service principal queries
sp_filter='app'


red=$'\033[0;31m'
yellow=$'\033[0;33m'
reset=$'\033[0m'
green=$'\033[0;32m'
blue=$'\033[0;34m'
JQ_ARGS="-r --arg yellow $yellow --arg reset $reset --arg green $green"


CHOICE=${1}


############ Functions #############


function get_account {
	az account list | jq ${JQ_ARGS} \
		'.[]
		| "Name: \($yellow)\(.name)\($reset)
Tenant: \($yellow)\(.tenantId)\($reset)
UserName: \($yellow)\(.user.name)\($reset)
UserType: \($yellow)\(.user.type)\($reset)\n"'

	printf "\nSubscriptions:\n"
	az account subscription list --only-show-errors | jq ${JQ_ARGS} \
		'.[]
		| "Name: \($yellow)\(.displayName)\($reset)
ID: \($yellow)\(.subscriptionId)\($reset)"'

	printf "\nRole assignments (along extra assignments to the groups of which the user is a member(transitively)):\n"
	SUBS=$(az account subscription list --only-show-errors | jq -r '.[].subscriptionId')
	ASSIGNEES=$(az account list | jq -r '.[].user.name' | uniq)
	for user in $ASSIGNEES;do
		for sub in $SUBS;do
			az role assignment list --include-groups --subscription ${sub} --all --assignee ${user} --only-show-errors | jq ${JQ_ARGS} \
				'.[]
				| "PrincipalName: \($yellow)\(.principalName)\($reset)
RoleName: \($yellow)\(.roleDefinitionName)\($reset)
Scope: \($yellow)\(.scope)\($reset)\n"'
		done
	done
	printf "\n"
}


function get_aad_users {
	for user_id in $(az ad user list | jq -r '.[].id');do 
        	az ad user show --id ${user_id} | jq ${JQ_ARGS} \
		'. | "UPN: \($green)\(.userPrincipalName)\($reset)
ID: \($yellow)\(.id)\($reset)
OnPremID: \($yellow)\(.onPremisesSecurityIdentifier)\($reset)"'
        	printf "Role assignments:\n"
        	az role assignment list --include-groups --all --assignee ${user_id} | jq ${JQ_ARGS} \
			'.[] 
			| "Name: \($yellow)\(.roleDefinitionName)\($reset)
Scope: \($yellow)\(.scope)\($reset)"'
       		printf "\n"
	done

}


function get_aad_group {
	az ad group list | jq ${JQ_ARGS} \
		'.[]
		| "Name: \($green)\(.displayName)\($reset)
OnPremID: \($yellow)\(.onPremisesSecurityIdentifier)\($reset)
OnPremSync: \($yellow)\(.onPremisesSyncEnabled)\($reset)
"'

	OLD_IFS=$IFS
	IFS=","
	for group in $(az ad group list | jq -r '[ .[].displayName ] | join(",")');do
		printf "Members for %s%s%s\n" "$yellow" "$group" "$reset"
		az ad group member list -g "${group}" | jq -r .[].userPrincipalName
		printf "Group Owner:\n"
		az ad group owner list -g "${group}"
		printf "Group is a member in:\n"
		az ad group get-member-groups -g "${group}"
		printf "\n"
	done
	IFS=$OLD_IFS
}


function get_aad_app {
	APPS=$(az ad app list | jq -r '.[].id')
	for application in $APPS;do
		az ad app show --id $application \
			| jq ${JQ_ARGS} \
			'. | 
"Name: \($green)\(.displayName)\($reset)
ID: \($yellow)\(.id)\($reset)
PasswordCredentials: \($yellow)\(if .passwordCredentials then .passwordCredentials else "N/A" end)\($reset)
KeyCredentials: \($yellow)\(if .keyCredentials then .keyCredentials else "N/A" end)\($reset)"'
		az ad app owner list --id ${application} | jq ${JQ_ARGS} '.[] | "Owner: \($yellow)\(.userPrincipalName)\($reset)"'
		printf "\n"
	done

}


function get_aad_sp {
	SPs=$(az ad sp list --all --query "[?contains(displayName,'"${sp_filter}"')].id" | jq -r .[])
	for sp in $SPs;do
		az ad sp show --id ${sp} | jq ${JQ_ARGS} \
			'. |
			"Name: \($yellow)\(.displayName)\($reset)
ID: \($yellow)\(.id)\($reset)
AppID: \($yellow)\(.appId)\($reset)
PasswordCredentials: \($yellow)\(if .passwordCredentials then .passwordCredentials else "N/A" end)\($reset)
KeyCredentials: \($yellow)\(if .keyCredentials then .keyCredentials else "N/A" end)\($reset)"'	
		az ad sp owner list --id ${sp} | jq ${JQ_ARGS} '.[] | "Owner: \($yellow)\(.userPrincipalName)\($reset)"'
		printf "\n"
	done
}


function aad_enum {
	printf "\n"
	printf "<------------ %s%s%s ----------->\n" "$blue" "Account Info" "$reset"
	get_account
	printf "<------------ %s%s%s ----------->\n" "$blue" "AAD Users" "$reset"
	get_aad_users
	printf "<------------ %s%s%s ----------->\n" "$blue" "AAD Groups" "$reset"
	get_aad_group
	printf "<------------ %s%s%s ----------->\n" "$blue" "AAD Apps" "$reset"
	get_aad_app
	printf "<------------ %s%s%s%s%s%s ----------->\n" "$blue" "AAD Service Principals, filter: " "$reset" "$red" "$sp_filter" "$reset" 
	get_aad_sp
}


function role_check {
	roleName=${1}
	roleData=$(az role definition list | jq -r '.[] | select(.roleName | index("'"$roleName"'"))')
	
	if [ -z $roleData ] 2>/dev/null;then
		printf "%sNo data returned by the query, maybe wrong role name ?%s" "$red" "$reset"
	else
		printf "Name: %s%s%s\n" "$green" "$(jq -r '.roleName' <<< ${roleData})" "$reset"
		printf "Name: %s%s%s\n" "$yellow" "$(jq -r '.roleType' <<< ${roleData})" "$reset"
		printf "Description: %s%s%s\n" "$yellow" "$(jq -r '.description' <<< ${roleData})" "$reset"
		printf "Permissions:\n"
		jq -r '.permissions' <<< ${roleData}
	fi
}


function arm_resources {
	SUBS=$(az account subscription list --only-show-errors | jq -r '.[].subscriptionId')
	for sub in $SUBS;do
		printf "\nSubscription: %s%s%s\n" "$blue" "$sub" "$reset"
		for group in $(az group list --subscription ${sub} | jq -r '.[].name');do
			printf "Resource Group: %s%s%s\n" "$green" "$group" "$reset"
			az resource list -g ${group} --subscription ${sub} | jq ${JQ_ARGS} \
				'.[]
				| "Name: \($yellow)\(.name)\($reset)
Type: \($yellow)\(.type)\($reset)
Identity: \($yellow)\(.identity)\($reset)\n"'
		done
	done

}



function usage {
	printf "Usage: %s$0 ACTION%s\n\n" "$blue" "$reset"
	printf "%sAvailable actions:%s\n" "$blue" "$reset"
	printf "arm         -->  Enumerate available resources in Azure Resource Manager\n"
	printf "aad         -->  Enumerate resources in Azure AD\n"
	printf "role-check  -->  Check the permissions for a particular role, role name should be passed as second argument\n"
	printf "                 If the role name is wrong all roles will be listed\n"
	exit 0
}




######################## Functions End ###################


case $CHOICE in
	'arm')
		arm_resources
		;;
	'aad')
		aad_enum
		;;
	'role-check')
		if [ $# -ne 2 ];then
			printf "%sMissing role name!%s\n" "$red" "$reset"
			usage
		else
			role_check "$2"
		fi
		;;
	*)
		usage
		;;
esac
