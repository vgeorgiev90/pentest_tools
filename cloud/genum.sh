#!/bin/bash

## Simple wrapper around gcloud cli for basic enumeration
## Dependencies:
## gcloud, jq



#Color codes
green='\033[0;32m'
red='\033[0;31m'
yellow='\033[0;33m'
blue='\033[0;34m'
reset='\033[0m'



function help_menu {
        printf "${blue}Usage:${reset}\n$0 FLAGS ACTION\n\n"
        printf "[-p PROJECT_ID ] -->  Google project ID\n"
        printf "[-r ROLE_ID ]    -->  Role ID to enumerate permissions\n\n\n"
        printf "${blue}Available actions:${reset}\n"
        printf "sa-enum         -> Enumerate service accounts for the supplied project\n"
        printf "role-check      -> Enumerate the permissions for the supplied role, if its a custom role a project ID is also expected\n"
        printf "get-buckets     -> Enumerate storage buckets in the provided project\n"
        printf "get-own-perms   -> Enumerate permissions of the loaded account\n"
	printf "get-instances   -> Enumerate running compute instnaaces\n"
	printf "get-functions   -> Enumerate cloud functions in the project\n"
	printf "get-project-acl -> Enumerate project IAM bindings\n"
	printf "run-all         -> Run all available enumerations\n"
        exit 0
}



### Command line arguments parsing
while getopts ":r:p:h" opt; do
    case "${opt}" in
        p)
            PROJECT_ID=${OPTARG}
            ;;
	r)
	    ROLE_ID=${OPTARG}
	    ;;
	h)
	    help_menu
	    ;;
        *)
            help_menu
            ;;
    esac
done
shift $((OPTIND-1))


ACTION=${1}



########### Function definitions ##########

function check_project_id {
	if [ -z ${PROJECT_ID} ];then
		printf "Please specify a ${red}project ID${reset}!"
		exit 0
	fi
}


function get_project_acl {
	yellow=$'\033[0;33m'
        reset=$'\033[0m'
	green=$'\033[0;32m'

	check_project_id
	gcloud projects get-iam-policy ${PROJECT_ID} --format=json \
		| jq -r --arg yellow "$yellow" --arg reset "$reset" --arg green "$green" \
		'.bindings[] | 
		"role: \($yellow)\(.role)\($reset)\nmembers: \n\($green)\(.members | unique | join(",\n"))\($reset)\n"'
}


function get_cloudfunctions {
	check_project_id
	FUNCTIONS_LIST=$(gcloud functions list --project ${PROJECT_ID} --format=json | jq -r '.[].name')
	for function in $FUNCTIONS_LIST;do
		name=$(awk -F"/" '{print $NF}' <<< $function)
		function_data=($(gcloud functions describe ${name} --project ${PROJECT_ID} --format=json | jq -r '.name, .serviceAccountEmail, .entryPoint, .httpsTrigger.url'))
		printf "Name: ${green}${name}${reset}\nSA: ${green}${function_data[1]}${reset}\nEntryPoint: ${green}${function_data[2]}${reset}\nURL: ${green}${function_data[3]}${reset}\n"
		printf "RBAC Policy:\n"
		gcloud functions get-iam-policy ${name} --project ${PROJECT_ID}
		printf "\n"

	done	
}


function get_self_permissions {
	check_project_id
	USERS=$(gcloud auth list --format=json | jq -r .[].account | paste -sd " ")

	##Check if there are multiple identities defined and choose one
	if [[ "$USERS" =~ \  ]]; then
                printf "More than ${red}one${reset} identity found, please specify which is to be used\n"
                
		user_list=(${USERS})
                list_len=$((${#user_list[@]}-1))

		for i in $(seq 0 ${list_len});do
                     printf "[${yellow}${i}${reset}] ${user_list[i]}\n"
                done
                
		printf "> "
                read input
		printf "\n"
		user=${user_list[$input]}
	else
		## Just a single identity
		user=${USERS}
	fi


	## Check if its a service account or a regular user account
	if [[ ${user} =~ "serviceaccount" ]];then
		SEARCH_USER="serviceAccount:${user}"
	else
		SEARCH_USER="user:${user}"
	fi

	roles=$(gcloud projects get-iam-policy ${PROJECT_ID} --format=json | jq -r ".bindings[] | select(.members | index(\"${SEARCH_USER}\")) | .role")
	printf "User: ${green}${user}${reset}\nRoles: ${yellow}${roles}${reset}\n\n" 

	## Iterate trough the roles and check the permissions of each one	
	for role in $roles;do
		if [[ $role =~ "reader"|"editor"|"owner" ]];then
			printf "Too many permissions for ${yellow}${role}${reset}, please check them trough: role-check\n"
		else
			printf "Permissions for role ${yellow}${role}${reset}:\n"
			get_role_privileges ${role}
			printf "\n"
		fi
	done
}


function get_compute {
	check_project_id
	INSTANCE_NAMES=$(gcloud compute instances list --project ${PROJECT_ID} --format=json | jq -r .[].name)
	for instance in $INSTANCE_NAMES;do
	    instance_data=($(gcloud compute instances list --project ${PROJECT_ID} --format=json --filter="${instance}" | jq -r '.[].zone, .[].serviceAccounts[].email, .[].networkInterfaces[].accessConfigs[].natIP'))
	    zone=$(awk -F"/" '{print $NF}' <<< ${instance_data[0]})
	    printf "Name: ${green}${instance}${reset}\nSA: ${green}${instance_data[1]}${reset}\nIP: ${green}${instance_data[2]}${reset}\nZone: ${green}${zone}${reset}\n"
	    printf "RBAC Policy:\n"
	    gcloud compute instances get-iam-policy ${instance} --zone ${zone} --project ${PROJECT_ID}
	    printf "\n\n"
	done
}


function get_storage {
	check_project_id
	BUCKETS=$(gcloud storage buckets list --project ${PROJECT_ID} --format=json | jq -r .[].storage_url)
	for bucket in $BUCKETS;do
		printf "\nBucket: ${yellow}${bucket}${reset}\nRBAC Policy:\n"
		gcloud storage buckets get-iam-policy ${bucket} --project ${PROJECT_ID} 2>/dev/null || printf "${red}No permissions to view the IAM policy!${reset}\n"
	done
}


function get_role_privileges {
	full_role=$1
	if [ $(awk -F"/" '{print $1}' <<< ${full_role}) == 'roles' ];then
		gcloud iam roles describe ${full_role}
	else
		check_project_id
		role=$(awk -F"/" '{print $NF}' <<< ${full_role})
		gcloud iam roles describe ${role} --project ${PROJECT_ID}
	fi
}


function enumerate_sa {
        yellow=$'\033[0;33m'
        reset=$'\033[0m'
        green=$'\033[0;32m'
	red=$'\033[0;31m'

	check_project_id
	printf "Checking service accounts for ${yellow}${PROJECT_ID}${reset}\n\n"
	SERVICE_ACCOUNTS=$(gcloud iam service-accounts list --project ${PROJECT_ID} --format=json | jq -r .[].email)
	for account in ${SERVICE_ACCOUNTS}; do
		printf "Account: ${green}${account}${reset}\nRBAC Policy:\n"
		gcloud iam service-accounts get-iam-policy ${account} --project ${PROJECT_ID} --format=json \
			| jq -r --arg yellow "$yellow" --arg reset "$reset" --arg green "$green" --arg red "$red" \
			'if .bindings then 
				.bindings[] | " role: \($yellow)\(.role)\($reset)\n members: \($green)\(.members)\($reset)\n"
			else
				" role: \($red)None or No Priviliges to list it!\($reset)\n"
			end
			'
	done
}




######## Script Start #######


case $ACTION in
	'sa-enum')
		enumerate_sa
		;;
	'role-check')
		if [ -z ${ROLE_ID} ];then
			printf "${red}Please provide role id for role-check${reset}"
			exit 0
		fi
		get_role_privileges ${ROLE_ID}
		;;
	'get-buckets')
		get_storage
		;;
	'get-instances')
		get_compute
		;;
	'get-own-perms')
		get_self_permissions
		;;
	'get-functions')
		get_cloudfunctions
		;;
	'get-project-acl')
		get_project_acl
		;;
	'run-all')
		printf "\n<--------- ${blue}Project IAM bindings${reset} --------->\n"
		get_project_acl
		printf "\n<--------- ${blue}Account Information${reset} --------->\n"
		get_self_permissions
		printf "\n<--------- ${blue}Service Accounts${reset} --------->\n"
		enumerate_sa
		printf "\n<--------- ${blue}Storage Buckets${reset} --------->\n"
		get_storage
		printf "\n<--------- ${blue}Compute Instances${reset} --------->\n"
		get_compute
		printf "\n<--------- ${blue}Cloud Functions${reset} --------->\n"
		get_cloudfunctions
		;;
	*)
		help_menu	
		;;
esac
