#!/usr/bin/python


import subprocess
from string import ascii_lowercase
from random import choice
from sys import exit
from termcolor import colored
import requests
import argparse
import re
import json


def Parser():
    parser = argparse.ArgumentParser(description="Scanner")
    subparsers = parser.add_subparsers(title="Subcommand parser", dest="subcommand", required=True)

    ## Nmap subcommand
    nmap_parser = subparsers.add_parser("port", help="Run nmap scan againts a target")
    nmap_parser.add_argument('-t', '--target', nargs=1, help='Target IP or FQDN to scan', required=True)

    ## Fuzzing subcommand
    fuzz_parser = subparsers.add_parser("fuzz", help="Run fuzzing with ffuf against a web target")
    fuzz_parser.add_argument('-t', '--target', nargs=1, help='Target FQDN: http://example.com', required=True)
    fuzz_parser.add_argument('-o', '--options', nargs='+', help='Additional ffuf options')

    ## Scan
    scan_parser = subparsers.add_parser("scan", help="Run different nuclei scans")
    scan_parser.add_argument('-t', '--target', nargs=1, help='Target FQDN: http://example.com', required=True)

   
    ## Util 
    util_parser = subparsers.add_parser('print-config', help="Print the json config that the script is expecting")


    return parser


def print_config():
    config = """{
        "flags": "-c",
        "vhost": {
                "method": "GET",
                "wordlist": "/usr/share/seclists/Discovery/DNS/subdomains-top1million-20000.txt"
        },
        "path": {
                "method": "GET",
                "wordlist": "/usr/share/seclists/Discovery/Web-Content/raft-large-directories-lowercase.txt"
        },
        "ext": {
                "method": "GET",
                "wordlist": "/usr/share/seclists/Discovery/Web-Content/raft-large-extensions-lowercase.txt",
                "main_file": "index"
        },
        "file": {
                "method": "GET",
                "wordlist": "/usr/share/seclists/Discovery/Web-Content/raft-large-directories-lowercase.txt"
        }
}
"""
    print(config)


class port_scan():

    def __init__(self, target):
        self.target = target

    def get_all_ports(self):
        proto = 'tcp'
        cmd = f'nmap -p- {self.target} -Pn'
        process = subprocess.Popen(['bash', '-c', cmd], stdout=subprocess.PIPE, text=True)
        process.wait()
        stdout,_ = process.communicate()
        open_ports = re.findall(r'\d+\/\w+', stdout)
        ports = [port.split(f"/{proto}")[0] for port in open_ports]
        return ports

    def full_scan(self):
        ports = self.get_all_ports()
        cmd = f'nmap -sV -sC -Pn -p{",".join(ports)} {self.target} -oX {self.target}.xml'
        process = subprocess.Popen(['bash', '-c', cmd], stdout=subprocess.PIPE, text=True)
        process.wait()
        stdout,_ = process.communicate()
        print(stdout)



def colored_out(text, words_list, color):
    for word in words_list:
        text = text.replace(word, colored(word, color))
    return text

def prompt(msg):
    choice = input(msg)
    if choice == '' or choice == 'yes' or choice == 'ok':
        return True
    else:
        return False

def execute(cmd):
    process = subprocess.Popen(['bash', '-c', cmd], stdout=subprocess.PIPE, text=True)
    for line in process.stdout:
        print(line, end='')



class Fuzzer():

    def __init__(self, target, additional_flags=None):
        config_path = '/home/kali/.local/scanner_config.json'
        self.target = target
        self.additional_flags = additional_flags if additional_flags else ''
        try:
            with open(config_path, 'r') as f:
                self.config = json.load(f)
        except FileNotFoundError:
            print(colored("Config file not found!", ["not", "found!"], "red"))
            exit(1)
        self.ffuf_flags = self.config['flags']
        self.get_target_cl()


    def get_target_cl(self):
        try:
            self.domain = self.target.split("://")[1]
        except IndexError:
            print(colored("Please provide a valid target: http://example.com", "http://example.com", "red"))
            exit(0)

        sub = ''.join(choice(ascii_lowercase) for _ in range(8))
        host_header = f'{sub}.{self.domain}'
        headers = {
            "Host": host_header
        }
        resp = requests.get(self.target, headers=headers, allow_redirects=False, verify=False)
        self.target_cl = len(resp.content)


    def vhost_fuzz(self):
        print(colored_out(f"Getting content-length for {self.target} => {self.target_cl}", [self.target, str(self.target_cl)], "green"))
        method = self.config['vhost']['method']
        wordlist = self.config['vhost']['wordlist']
        cmd = f'ffuf -w {wordlist}:FUZZ -u {self.target} -X {method} -H "Host: FUZZ.{self.domain}" -mc all -fs {self.target_cl},0 {self.ffuf_flags} {self.additional_flags}'
        execute(cmd)


    def path_fuzz(self):
        method = self.config['path']['method']
        wordlist = self.config['path']['wordlist']
        cmd = f'ffuf -w {wordlist}:FUZZ -u {self.target}/FUZZ -X {method} {self.ffuf_flags} -fs {self.target_cl},0 {self.additional_flags}'
        execute(cmd)


    def ext_fuzz(self):
        method = self.config['ext']['method']
        wordlist = self.config['ext']['wordlist']
        main_file = self.config['ext']['main_file']
        cmd = f'ffuf -w {wordlist}:FUZZ -u {self.target}/{main_file}FUZZ -X {method} {self.ffuf_flags} -fs {self.target_cl},0 {self.additional_flags}'
        execute(cmd)


    def file_fuzz(self, ext):
        method = self.config['file']['method']
        wordlist = self.config['file']['wordlist']
        cmd = f'ffuf -w {wordlist}:FUZZ -u {self.target}/FUZZ{ext} -X {method} {self.ffuf_flags} -fs {self.target_cl},0 {self.additional_flags}'
        execute(cmd)


class Scanner():

    def __init__(self, target):
        self.target = target
        self.nuclei_flags = '-silent -etags cloud'
        print(colored_out(f"Nuclei flags provided: {self.nuclei_flags}", [self.nuclei_flags], "green"))

    def waf_check(self):
        print(colored_out("Starting nuclei WAF check", ["WAF"], "yellow"))
        cmd = f'nuclei -tags waf -u {self.target} {self.nuclei_flags}'
        execute(cmd)

    def exposures_check(self):
        print(colored_out("Starting nuclei Exposures checks", ["Exposures"], "yellow"))
        cmd = f'nuclei -t exposures/ -u {self.target} {self.nuclei_flags}'
        execute(cmd)

    def exposed_pannels(self):
        print(colored_out("Starting nuclei Exposed Pannels checks", ["Exposed", "Pannels"], "yellow"))
        cmd = f'nuclei -t exposed-panels/ -u {self.target} {self.nuclei_flags}'
        execute(cmd)

    def default_logins(self):
        print(colored_out("Starting nuclei Default Logins checks", ["Default", "Logins"], "yellow"))
        cmd = f'nuclei -t default-logins/ -u {self.target} {self.nuclei_flags}'
        execute(cmd)

    def missconfig(self):
        print(colored_out("Starting nuclei Misconfiguration checks", ["Misconfiguration"], "yellow"))
        cmd = f'nuclei -t misconfiguration/ -u {self.target} {self.nuclei_flags}'
        execute(cmd)

    def run_all(self):
        self.waf_check()
        self.exposures_check()
        self.exposed_pannels()
        self.default_logins()
        self.missconfig()


parser = Parser()
args = parser.parse_args()

if args.subcommand == 'port':
    print(f"Starting Nmap against {args.target[0]}")
    target = args.target[0]
    nmap = port_scan(target)
    nmap.full_scan()


elif args.subcommand == 'fuzz':
    target = args.target[0]
    if args.options:
        opts = ' '.join(args.options)

    fuzz = Fuzzer(target, additional_flags=opts)
    if prompt(colored_out(f"Start vhost fuzz for {target} [yes/no]?> ", ["vhost"], "green")):
        fuzz.vhost_fuzz()
    if prompt(colored_out(f"Start basic path fuzz for {target} [yes/no]?> ", ["path"], "green")):
        fuzz.path_fuzz()
    if prompt(colored_out("Start extension fuzz [yes/no]?> ", ["extension"], "green")):
        fuzz.ext_fuzz()
    if prompt(colored_out("Start additional file fuzz [yes/no]?> ", ["file"], "green")):
        if prompt(colored_out("Default extension is .php is this ok [yes/no]?> ", [".php"], "yellow")):
            ext = '.php'
        else:
            ext = input("> ")
        fuzz.file_fuzz(ext)

elif args.subcommand == 'scan':
    target = args.target[0]
    scan = Scanner(target)
    try:
        scan.run_all()
    except KeyboardInterrupt:
        print(colored_out("Exiting..", ["Exiting.."], "red"))

elif args.subcommand == 'print-config':
    print_config()
